-----APP PROPERTIES

spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:mem:testdb


----AUTHOR MODEL---

package com.example.velocityh2crud.model;

import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class Author {
	
private String authorName;
	
	@Id // primary key 
	private int authorId;
	private String book;
	
	
	public Author() {
		
	}


	public Author(String authorName, int authorId, String book) {
		super();
		this.authorName = authorName;
		this.authorId = authorId;
		this.book = book;
	}


	public String getAuthorName() {
		return authorName;
	}


	public void setAuthorName(String authorName) {
		this.authorName = authorName;
	}


	public int getAuthorId() {
		return authorId;
	}


	public void setAuthorId(int authorId) {
		this.authorId = authorId;
	}


	public String getBook() {
		return book;
	}


	public void setBook(String book) {
		this.book = book;
	}


	@Override
	public String toString() {
		return "Author [authorName=" + authorName + ", authorId=" + authorId + ", book=" + book + "]";
	}
	
	
	
}
------AUTHOR DAO=-----
package com.example.velocityh2crud.dao;

import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;

import com.example.velocityh2crud.model.Author;

@Repository
public interface AuthorDao extends CrudRepository<Author, Integer>{
	
}
-------AUTHOR SERVICE
package com.example.velocityh2crud.services;

import java.util.List;

import org.springframework.stereotype.Service;

import com.example.velocityh2crud.model.Author;

@Service
public interface AuthorService {

	public Author saveAuthor(Author author);
	
	public List<Author> getAllAuthor(); 
		
	public Author getAuthor(int authorId);
	
	public String deleteAuthor(int authorId);
	
	public Author updateAuthor(Author author);
	
}

----AUTHOR SERVICE IMPLEMENTATION---

package com.example.velocityh2crud.services;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.velocityh2crud.dao.AuthorDao;
import com.example.velocityh2crud.model.Author;

@Service
public class AuthorImpl implements AuthorService {
	
	@Autowired
	AuthorDao authorDao;
	
	@Override
	public Author saveAuthor(Author author) 
	{	
		String name=nameGenerator(author.getAuthorName());
		author.setAuthorName(name);
		return authorDao.save(author);
	}
	
	public String nameGenerator(String name) {
		return name.toUpperCase();
	}

	@Override
	public List<Author> getAllAuthor() {
		
		return (List<Author>) authorDao.findAll();
	}

	@Override
	public Author getAuthor(int authorId) {
		
		return authorDao.findById(authorId).get();
	}

	@Override
	public String deleteAuthor(int authorId) {

		Author author= getAuthor(authorId);
		
		if(author!=null) {
			authorDao.delete(author);		
			return "author deleted";
		}
		else
		return "author cant be del";
		
	}

	@Override
	public Author updateAuthor(Author author) {
		
		return authorDao.save(author);
	}

	
	
}
---- AUTHOR CTRL---
package com.example.velocityh2crud.controller;

import java.security.PublicKey;
import java.util.List;

import org.apache.catalina.authenticator.SavedRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.velocityh2crud.model.Author;
import com.example.velocityh2crud.services.AuthorService;

@RequestMapping("author")
@RestController
public class AuthorController {
	
	@Autowired
	AuthorService authorService;
	
	@PostMapping
	public ResponseEntity<Author> saveAuthord(@RequestBody Author author)
	{
		Author savedAuthor=authorService.saveAuthor(author);
		return new ResponseEntity<Author>(savedAuthor,HttpStatus.CREATED);
	}
	
	@GetMapping
	public ResponseEntity<List<Author>> getAuthors(){
		List<Author> authors=authorService.getAllAuthor();
		return new ResponseEntity<List<Author>>(authors,HttpStatus.FOUND);
	}
	
	@GetMapping("/{authorid}")
	public ResponseEntity<Author> getAuthor(@PathVariable int authorid){
	Author author=	authorService.getAuthor(authorid);
	return new ResponseEntity<Author>(author,HttpStatus.FOUND);
	}
	
	@DeleteMapping("/{authId}")
	public ResponseEntity<String> delauthor(@PathVariable int authId){
		String res=authorService.deleteAuthor(authId);
		return new ResponseEntity<String>(res,HttpStatus.OK);
	}
	
	@PutMapping
	public ResponseEntity<Author> upauth(@RequestBody Author author){
		Author savedAuthor=authorService.updateAuthor(author);
		return new ResponseEntity<Author>(savedAuthor,HttpStatus.CREATED);
	}
	
}
